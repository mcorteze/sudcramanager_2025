-- *********************************************************
--                        CASO 1
-- *********************************************************
--
-- ************** Creación de la tabla RECAUDACION_BONOS_MEDICOS **************
CREATE TABLE RECAUDACION_BONOS_MEDICOS (
    RUT_MEDICO VARCHAR2(10) NOT NULL,
    NOMBRE_COMPLETO VARCHAR2(50) NOT NULL,
    TOTAL_RECAUDADO NUMBER(10) NOT NULL,
    UNIDAD_MEDICA VARCHAR2(40) NOT NULL
);

-- ************** Consulta para calcular la recaudación total y poblar la tabla **************
INSERT INTO RECAUDACION_BONOS_MEDICOS (RUT_MEDICO, NOMBRE_COMPLETO, TOTAL_RECAUDADO, UNIDAD_MEDICA)
SELECT 
    TO_CHAR(M.RUT_MED) || '-' || M.DV_RUN AS RUT_MEDICO,
    M.PNOMBRE || ' ' || M.APATERNO || ' ' || M.AMATERNO AS NOMBRE_COMPLETO,
    SUM(BC.COSTO) AS TOTAL_RECAUDADO,
    UC.NOMBRE AS UNIDAD_MEDICA
FROM 
    BONO_CONSULTA BC
INNER JOIN 
    MEDICO M ON BC.RUT_MED = M.RUT_MED
INNER JOIN 
    UNIDAD_CONSULTA UC ON M.UNI_ID = UC.UNI_ID
LEFT JOIN 
    CARGO C ON M.CAR_ID = C.CAR_ID
WHERE 
    M.CAR_ID NOT IN (100, 500, 600) -- Excluímos los cargos indicados
    AND EXTRACT(YEAR FROM BC.FECHA_BONO) = EXTRACT(YEAR FROM SYSDATE) - 1 -- Año anterior
GROUP BY 
    TO_CHAR(M.RUT_MED) || '-' || M.DV_RUN,
    M.PNOMBRE,
    M.APATERNO,
    M.AMATERNO,
    UC.NOMBRE
ORDER BY 
    TOTAL_RECAUDADO ASC; -- Ordenamos

-- *********************************************************
--                        CASO 2
-- *********************************************************
--
-- ************** Creación de la tabla DETALLE_PERDIDAS_BONOS **************
CREATE TABLE DETALLE_PERDIDAS_BONOS (
    ESPECIALIDAD_MEDICA VARCHAR2(40) NOT NULL,
    CANTIDAD_BONOS NUMBER(10) NOT NULL,
    MONTO_PERDIDA NUMBER(10) NOT NULL,
    FECHA_BONO_ANTIGUO DATE NOT NULL,
    ESTADO_DE_COBRO VARCHAR2(20) NOT NULL
);
-- ************** Consulta para poblar la tabla con los datos respectivos **************
INSERT INTO DETALLE_PERDIDAS_BONOS (ESPECIALIDAD_MEDICA, CANTIDAD_BONOS, MONTO_PERDIDA, FECHA_BONO_ANTIGUO, ESTADO_DE_COBRO)
SELECT 
    EM.NOMBRE AS ESPECIALIDAD_MEDICA,
    COUNT(BC.ID_BONO) AS CANTIDAD_BONOS,
    SUM(BC.COSTO) AS MONTO_PERDIDA,
    MIN(BC.FECHA_BONO) AS FECHA_BONO_ANTIGUO,
    CASE 
        WHEN EXTRACT(YEAR FROM BC.FECHA_BONO) >= EXTRACT(YEAR FROM SYSDATE) - 1 THEN 'COBRABLE'
        ELSE 'INCOBRABLE'
    END AS ESTADO_DE_COBRO
FROM 
    BONO_CONSULTA BC
INNER JOIN 
    ESPECIALIDAD_MEDICA EM ON BC.ESP_ID = EM.ESP_ID
WHERE 
    BC.ID_BONO NOT IN (SELECT P.ID_BONO FROM PAGOS P) -- Condicion para bonos no pagados
GROUP BY 
    EM.NOMBRE,
    CASE 
        WHEN EXTRACT(YEAR FROM BC.FECHA_BONO) >= EXTRACT(YEAR FROM SYSDATE) - 1 THEN 'COBRABLE'
        ELSE 'INCOBRABLE'
    END
ORDER BY 
    CANTIDAD_BONOS DESC, -- Ordenamos de mayor a menor respecto de cantidad de bonos
    MONTO_PERDIDA DESC;  -- En caso de empate se ordena de mayor a menor respecto de monto perdida

-- *********************************************************
--                        CASO 3
-- *********************************************************
--
-- ************** consulta y filtrado de datos **************
WITH MONTO_PROMEDIO_ANNO_ANTERIOR AS (
    SELECT 
        ROUND(AVG(MONTO_TOTAL_BONOS)) AS PROMEDIO
    FROM 
        CANT_BONOS_PACIENTES_ANNIO
    WHERE 
        ANNIO_CALCULO = EXTRACT(YEAR FROM SYSDATE) - 1
),
DATOS_PACIENTES AS (
    SELECT 
        P.PAC_RUN,
        P.DV_RUN,
        TRUNC((MONTHS_BETWEEN(SYSDATE, P.FECHA_NACIMIENTO) / 12)) AS EDAD,
        COUNT(BC.ID_BONO) AS CANTIDAD_BONOS,
        NVL(SUM(BC.COSTO), 0) AS MONTO_TOTAL_BONOS,
        SS.DESCRIPCION AS SISTEMA_SALUD
    FROM 
        PACIENTE P
    LEFT JOIN 
        BONO_CONSULTA BC ON P.PAC_RUN = BC.PAC_RUN
    LEFT JOIN 
        SALUD S ON P.SAL_ID = S.SAL_ID
    LEFT JOIN 
        SISTEMA_SALUD SS ON S.TIPO_SAL_ID = SS.TIPO_SAL_ID
    WHERE 
        EXTRACT(YEAR FROM BC.FECHA_BONO) = EXTRACT(YEAR FROM SYSDATE) -- año actual
        OR BC.FECHA_BONO IS NULL -- pacientes sin bonos en el período
    GROUP BY 
        P.PAC_RUN, P.DV_RUN, P.FECHA_NACIMIENTO, SS.DESCRIPCION
),
DATOS_FILTRADOS AS (
    SELECT 
        D.PAC_RUN,
        D.DV_RUN,
        D.EDAD,
        D.CANTIDAD_BONOS,
        D.MONTO_TOTAL_BONOS,
        D.SISTEMA_SALUD
    FROM 
        DATOS_PACIENTES D, MONTO_PROMEDIO_ANNO_ANTERIOR M
    WHERE 
        D.MONTO_TOTAL_BONOS <= M.PROMEDIO -- filtramos por promedio
)
SELECT 
    EXTRACT(YEAR FROM SYSDATE) AS ANNIO_CALCULO,
    D.PAC_RUN,
    D.DV_RUN,
    D.EDAD,
    D.CANTIDAD_BONOS,
    D.MONTO_TOTAL_BONOS,
    D.SISTEMA_SALUD
FROM 
    DATOS_FILTRADOS D
ORDER BY 
    D.MONTO_TOTAL_BONOS DESC,
    D.EDAD DESC;

-- ************** Inserción de datos **************
INSERT INTO CANT_BONOS_PACIENTES_ANNIO (
    ANNIO_CALCULO,
    PAC_RUN,
    DV_RUN,
    EDAD,
    CANTIDAD_BONOS,
    MONTO_TOTAL_BONOS,
    SISTEMA_SALUD
)
WITH MONTO_PROMEDIO_ANNO_ANTERIOR AS (
    SELECT 
        ROUND(AVG(MONTO_TOTAL_BONOS)) AS PROMEDIO
    FROM 
        CANT_BONOS_PACIENTES_ANNIO
    WHERE 
        ANNIO_CALCULO = EXTRACT(YEAR FROM SYSDATE) - 1
),
DATOS_PACIENTES AS (
    SELECT 
        P.PAC_RUN,
        P.DV_RUN,
        TRUNC((MONTHS_BETWEEN(SYSDATE, P.FECHA_NACIMIENTO) / 12)) AS EDAD,
        COUNT(BC.ID_BONO) AS CANTIDAD_BONOS,
        NVL(SUM(BC.COSTO), 0) AS MONTO_TOTAL_BONOS,
        SS.DESCRIPCION AS SISTEMA_SALUD
    FROM 
        PACIENTE P
    LEFT JOIN 
        BONO_CONSULTA BC ON P.PAC_RUN = BC.PAC_RUN
    LEFT JOIN 
        SALUD S ON P.SAL_ID = S.SAL_ID
    LEFT JOIN 
        SISTEMA_SALUD SS ON S.TIPO_SAL_ID = SS.TIPO_SAL_ID
    WHERE 
        EXTRACT(YEAR FROM BC.FECHA_BONO) = EXTRACT(YEAR FROM SYSDATE) 
        OR BC.FECHA_BONO IS NULL 
    GROUP BY 
        P.PAC_RUN, P.DV_RUN, P.FECHA_NACIMIENTO, SS.DESCRIPCION
),
DATOS_FILTRADOS AS (
    SELECT 
        D.PAC_RUN,
        D.DV_RUN,
        D.EDAD,
        D.CANTIDAD_BONOS,
        D.MONTO_TOTAL_BONOS,
        D.SISTEMA_SALUD
    FROM 
        DATOS_PACIENTES D, MONTO_PROMEDIO_ANNO_ANTERIOR M
    WHERE 
        D.MONTO_TOTAL_BONOS <= M.PROMEDIO
)
SELECT 
    EXTRACT(YEAR FROM SYSDATE) AS ANNIO_CALCULO,
    D.PAC_RUN,
    D.DV_RUN,
    D.EDAD,
    D.CANTIDAD_BONOS,
    D.MONTO_TOTAL_BONOS,
    D.SISTEMA_SALUD
FROM 
    DATOS_FILTRADOS D
ORDER BY 
    D.MONTO_TOTAL_BONOS DESC,
    D.EDAD DESC;